#!/usr/bin/python

import signal
import sys
import os
import re

from Xlib import display, X, Xatom


def parse(env):
    for pattern in os.environ.get(env, '').split(','):
        pattern = pattern.strip()
        if pattern:
            yield re.compile('.*%s.*' % pattern)


def match(win):
    try:
        type = win.get_full_property(type_atom, X.AnyPropertyType)
        normal = type and type.value[0] == normal_atom
        target = '%s::%s' % ('::'.join(win.get_wm_class()), win.get_wm_name())
    except Exception:
        return False
    return (normal and
            (not whitelist or any(p.match(target) for p in whitelist)) and
            (not blacklist or all(not p.match(target) for p in blacklist)))


def hide(win):
    hide = win.get_full_property(hide_atom, X.AnyPropertyType)
    handled[win.id] = hide and hide.value
    win.change_property(hide_atom, Xatom.CARDINAL, 32, [1])


def unhide(win_id, prev_value):
    win = dpy.create_resource_object('window', win_id)
    if prev_value is None:
        win.delete_property(hide_atom)
    elif prev_value is not True:
        win.change_property(hide_atom, Xatom.CARDINAL, 32, prev_value)


def handle(event):
    win = event.window
    if event.type == X.CreateNotify and match(win):
        win.change_attributes(event_mask=X.StructureNotifyMask)
        handled[win.id] = True
    elif event.type == X.MapNotify and handled.get(win.id) is True:
        hide(win)
    elif event.type == X.DestroyNotify and win.id in handled:
        del handled[win.id]


def rlist(parent=None):
    try:
        for win in (parent or root).query_tree().children:
            yield win
            yield from rlist(win)
    except Exception:
        pass


def exit(*args):
    for win_id, value in handled.items():
        unhide(win_id, value)
    dpy.flush()
    sys.exit()


def loop():
    for win in rlist():
        if match(win):
            hide(win)
    root.change_attributes(event_mask=X.SubstructureNotifyMask)
    while True:
        handle(dpy.next_event())


handled = {}
dpy = display.Display()
root = dpy.screen().root
hide_atom = dpy.intern_atom('_GTK_HIDE_TITLEBAR_WHEN_MAXIMIZED')
type_atom = dpy.intern_atom('_NET_WM_WINDOW_TYPE')
normal_atom = dpy.intern_atom('_NET_WM_WINDOW_TYPE_NORMAL')
whitelist = list(parse('MAXIMAL_WHITELIST'))
blacklist = list(parse('MAXIMAL_BLACKLIST'))
signal.signal(signal.SIGTERM, exit)
loop()
